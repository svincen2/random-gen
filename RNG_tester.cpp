#include "Random_generator.h"
#include "Std_random.h"
#include <chrono>
#include <iostream>
#include <vector>


// For system_clock.
using namespace std::chrono;


/**
 * Print the distribution.
 * The distribution is given in [frequency], where each
 * element in [frequency] is the number of times the number
 * ([min] + index) was generated by a random number generator.
 *
 * params:
 * 	frequency - Holds the number of times each number in
 * 	the range [min, frequency.size() - 1] was generated by
 * 	a random number generator.
 */
void print_distribution(std::vector<int>& frequency, int min) {
	std::cout << "Distribution\n";
	for (int i = 0; i < frequency.size(); ++i) {
		std::cout << min + i << ": ";
		std::cout << frequency[i] << '\n';
	}
}


/**
 * Test the random number generator.
 *
 * params:
 * 	generator - Random number generator to test.
 * 	count - Number of numbers to generate.
 */
void test_generator(Random_generator* generator, int count) {
	std::cout << "Testing " << generator->name() << '\n';
	std::vector<int> frequency(generator->range_size(), 0);
	std::vector<int> sequence{};
	for (int i = 0; i < count; ++i) {
		int num{generator->generate()};
		frequency[num]++;
		sequence.push_back(num);
	}
	print_distribution(frequency, generator->min());
}


/**
 * Main entry point into the program.
 * Test a random number generator provided by the standard
 * library against one developed by me (Sean Vincent).
 */
int main() {
	auto seed{system_clock::now().time_since_epoch().count()};
	int gen_count{10000};
	Random_generator* std_gen{new Std_random{0, 10}};
	std_gen->seed(seed);
	test_generator(std_gen, gen_count);
	delete std_gen;
	return 0;
}

